//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int tc = scan.nextInt();

        while (tc-- > 0) {
            int N = scan.nextInt();
            int M = scan.nextInt();
            int E = scan.nextInt();

            boolean graph[][] = new boolean[N][N];

            for (int i = 0; i < E; i++) {
                int u = scan.nextInt() - 1;
                int v = scan.nextInt() - 1;
                graph[u][v] = true;
                graph[v][u] = true;
            }

            System.out.println(new solve().graphColoring(graph, M, N) ? 1 : 0);
        }
    }
}

// } Driver Code Ends


class solve {
    boolean check(int v, int clr, int colour[], List<List<Integer>> adj){
        List<Integer> adjVertices = adj.get(v);
        for(int i = 0 ; i < adjVertices.size() ; i++){
            if(colour[adjVertices.get(i)] == clr)
                return false;
        }
        return true;
    }
    boolean isPossible(int v, List<List<Integer>> adj, int n, int m, int colour[])
    {
        if(v == n)
            return true;
        for(int i = 1 ; i <= m ; i++){
            if(check(v, i, colour, adj))
            {
                colour[v] = i;
                if(isPossible(v+1, adj, n, m, colour))
                    return true;
                colour[v] = -1;    
            }
        }
        return false;
    }
    // Function to determine if graph can be coloured with at most M colours
    // such
    // that no two adjacent vertices of graph are coloured with same colour.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Your code here
        List<List<Integer>> adj = new ArrayList<>();
        for(int i = 0 ; i < n ; i++)
            adj.add(new ArrayList<Integer>());
        
        for(int i = 0 ; i < graph.length ; i++){
            for(int j = 0 ; j < graph[0].length ; j++)
            {
                if(graph[i][j])
                {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }
        int colour[] = new int[n];
        Arrays.fill(colour, -1);
        return isPossible(0, adj, n, m, colour);
    }
}
